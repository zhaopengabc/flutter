/*
 * @Description: Do not edit
 * @Author: haojieyu (haojieyu@novastar.tech)
 * @Date: 2020-05-27 21:29:35
 * @LastEditors: haojieyu
 * @LastEditTime: 2020-05-27 21:29:35
 */ 
class Autogenerated {
  List<Data> data;
  String msg;
  int status;

  Autogenerated({this.data, this.msg, this.status});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      data = new List<Data>();
      json['data'].forEach((v) {
        data.add(new Data.fromJson(v));
      });
    }
    msg = json['msg'];
    status = json['status'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.data != null) {
      data['data'] = this.data.map((v) => v.toJson()).toList();
    }
    data['msg'] = this.msg;
    data['status'] = this.status;
    return data;
  }
}

class Data {
  Bkg bkg;
  Freeze freeze;
  Freeze ftb;
  Osd osd;
  Osd osdImage;
  int brightness;
  int deviceId;
  int gamma;
  General general;
  List<ImageQuality> imageQuality;
  int mayUse;
  int nonTime;
  OutputMode outputMode;
  PresetPoll presetPoll;
  int screenBrightness;
  int screenId;
  List<ScreenLayers> screenLayers;
  SwitchEffect switchEffect;
  TestPattern testPattern;
  int usedEyeCare;
  int usedImageQualityMode;

  Data(
      {this.bkg,
      this.freeze,
      this.ftb,
      this.osd,
      this.osdImage,
      this.brightness,
      this.deviceId,
      this.gamma,
      this.general,
      this.imageQuality,
      this.mayUse,
      this.nonTime,
      this.outputMode,
      this.presetPoll,
      this.screenBrightness,
      this.screenId,
      this.screenLayers,
      this.switchEffect,
      this.testPattern,
      this.usedEyeCare,
      this.usedImageQualityMode});

  Data.fromJson(Map<String, dynamic> json) {
    bkg = json['Bkg'] != null ? new Bkg.fromJson(json['Bkg']) : null;
    freeze =
        json['Freeze'] != null ? new Freeze.fromJson(json['Freeze']) : null;
    ftb = json['Ftb'] != null ? new Freeze.fromJson(json['Ftb']) : null;
    osd = json['Osd'] != null ? new Osd.fromJson(json['Osd']) : null;
    osdImage =
        json['OsdImage'] != null ? new Osd.fromJson(json['OsdImage']) : null;
    brightness = json['brightness'];
    deviceId = json['deviceId'];
    gamma = json['gamma'];
    general =
        json['general'] != null ? new General.fromJson(json['general']) : null;
    if (json['imageQuality'] != null) {
      imageQuality = new List<ImageQuality>();
      json['imageQuality'].forEach((v) {
        imageQuality.add(new ImageQuality.fromJson(v));
      });
    }
    mayUse = json['mayUse'];
    nonTime = json['nonTime'];
    outputMode = json['outputMode'] != null
        ? new OutputMode.fromJson(json['outputMode'])
        : null;
    presetPoll = json['presetPoll'] != null
        ? new PresetPoll.fromJson(json['presetPoll'])
        : null;
    screenBrightness = json['screenBrightness'];
    screenId = json['screenId'];
    if (json['screenLayers'] != null) {
      screenLayers = new List<ScreenLayers>();
      json['screenLayers'].forEach((v) {
        screenLayers.add(new ScreenLayers.fromJson(v));
      });
    }
    switchEffect = json['switchEffect'] != null
        ? new SwitchEffect.fromJson(json['switchEffect'])
        : null;
    testPattern = json['testPattern'] != null
        ? new TestPattern.fromJson(json['testPattern'])
        : null;
    usedEyeCare = json['usedEyeCare'];
    usedImageQualityMode = json['usedImageQualityMode'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.bkg != null) {
      data['Bkg'] = this.bkg.toJson();
    }
    if (this.freeze != null) {
      data['Freeze'] = this.freeze.toJson();
    }
    if (this.ftb != null) {
      data['Ftb'] = this.ftb.toJson();
    }
    if (this.osd != null) {
      data['Osd'] = this.osd.toJson();
    }
    if (this.osdImage != null) {
      data['OsdImage'] = this.osdImage.toJson();
    }
    data['brightness'] = this.brightness;
    data['deviceId'] = this.deviceId;
    data['gamma'] = this.gamma;
    if (this.general != null) {
      data['general'] = this.general.toJson();
    }
    if (this.imageQuality != null) {
      data['imageQuality'] = this.imageQuality.map((v) => v.toJson()).toList();
    }
    data['mayUse'] = this.mayUse;
    data['nonTime'] = this.nonTime;
    if (this.outputMode != null) {
      data['outputMode'] = this.outputMode.toJson();
    }
    if (this.presetPoll != null) {
      data['presetPoll'] = this.presetPoll.toJson();
    }
    data['screenBrightness'] = this.screenBrightness;
    data['screenId'] = this.screenId;
    if (this.screenLayers != null) {
      data['screenLayers'] = this.screenLayers.map((v) => v.toJson()).toList();
    }
    if (this.switchEffect != null) {
      data['switchEffect'] = this.switchEffect.toJson();
    }
    if (this.testPattern != null) {
      data['testPattern'] = this.testPattern.toJson();
    }
    data['usedEyeCare'] = this.usedEyeCare;
    data['usedImageQualityMode'] = this.usedImageQualityMode;
    return data;
  }
}

class Bkg {
  int bkgId;
  int enable;
  String imgUrl;

  Bkg({this.bkgId, this.enable, this.imgUrl});

  Bkg.fromJson(Map<String, dynamic> json) {
    bkgId = json['bkgId'];
    enable = json['enable'];
    imgUrl = json['imgUrl'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['bkgId'] = this.bkgId;
    data['enable'] = this.enable;
    data['imgUrl'] = this.imgUrl;
    return data;
  }
}

class Freeze {
  int enable;

  Freeze({this.enable});

  Freeze.fromJson(Map<String, dynamic> json) {
    enable = json['enable'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['enable'] = this.enable;
    return data;
  }
}

class Osd {
  int enable;
  int height;
  Image image;
  int isJudge;
  int type;
  int width;
  Words words;
  int x;
  int y;

  Osd(
      {this.enable,
      this.height,
      this.image,
      this.isJudge,
      this.type,
      this.width,
      this.words,
      this.x,
      this.y});

  Osd.fromJson(Map<String, dynamic> json) {
    enable = json['enable'];
    height = json['height'];
    image = json['image'] != null ? new Image.fromJson(json['image']) : null;
    isJudge = json['isJudge'];
    type = json['type'];
    width = json['width'];
    words = json['words'] != null ? new Words.fromJson(json['words']) : null;
    x = json['x'];
    y = json['y'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['enable'] = this.enable;
    data['height'] = this.height;
    if (this.image != null) {
      data['image'] = this.image.toJson();
    }
    data['isJudge'] = this.isJudge;
    data['type'] = this.type;
    data['width'] = this.width;
    if (this.words != null) {
      data['words'] = this.words.toJson();
    }
    data['x'] = this.x;
    data['y'] = this.y;
    return data;
  }
}

class Image {
  File file;
  int opacity;

  Image({this.file, this.opacity});

  Image.fromJson(Map<String, dynamic> json) {
    file = json['file'] != null ? new File.fromJson(json['file']) : null;
    opacity = json['opacity'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.file != null) {
      data['file'] = this.file.toJson();
    }
    data['opacity'] = this.opacity;
    return data;
  }
}

class File {
  int fileLength;
  String fileName;
  int hashSum;
  int height;
  int width;

  File({this.fileLength, this.fileName, this.hashSum, this.height, this.width});

  File.fromJson(Map<String, dynamic> json) {
    fileLength = json['fileLength'];
    fileName = json['fileName'];
    hashSum = json['hashSum'];
    height = json['height'];
    width = json['width'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['fileLength'] = this.fileLength;
    data['fileName'] = this.fileName;
    data['hashSum'] = this.hashSum;
    data['height'] = this.height;
    data['width'] = this.width;
    return data;
  }
}

class Words {
  int aligned;
  BackgroundColor backgroundColor;
  int backgroundEnable;
  Image backgroundImage;
  int backgroundType;
  String chars;
  int direction;
  int font;
  BackgroundColor fontColor;
  int fontPercent;
  int space;
  int speed;

  Words(
      {this.aligned,
      this.backgroundColor,
      this.backgroundEnable,
      this.backgroundImage,
      this.backgroundType,
      this.chars,
      this.direction,
      this.font,
      this.fontColor,
      this.fontPercent,
      this.space,
      this.speed});

  Words.fromJson(Map<String, dynamic> json) {
    aligned = json['aligned'];
    backgroundColor = json['backgroundColor'] != null
        ? new BackgroundColor.fromJson(json['backgroundColor'])
        : null;
    backgroundEnable = json['backgroundEnable'];
    backgroundImage = json['backgroundImage'] != null
        ? new Image.fromJson(json['backgroundImage'])
        : null;
    backgroundType = json['backgroundType'];
    chars = json['chars'];
    direction = json['direction'];
    font = json['font'];
    fontColor = json['fontColor'] != null
        ? new BackgroundColor.fromJson(json['fontColor'])
        : null;
    fontPercent = json['fontPercent'];
    space = json['space'];
    speed = json['speed'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['aligned'] = this.aligned;
    if (this.backgroundColor != null) {
      data['backgroundColor'] = this.backgroundColor.toJson();
    }
    data['backgroundEnable'] = this.backgroundEnable;
    if (this.backgroundImage != null) {
      data['backgroundImage'] = this.backgroundImage.toJson();
    }
    data['backgroundType'] = this.backgroundType;
    data['chars'] = this.chars;
    data['direction'] = this.direction;
    data['font'] = this.font;
    if (this.fontColor != null) {
      data['fontColor'] = this.fontColor.toJson();
    }
    data['fontPercent'] = this.fontPercent;
    data['space'] = this.space;
    data['speed'] = this.speed;
    return data;
  }
}

class BackgroundColor {
  int a;
  int b;
  int g;
  int r;

  BackgroundColor({this.a, this.b, this.g, this.r});

  BackgroundColor.fromJson(Map<String, dynamic> json) {
    a = json['A'];
    b = json['B'];
    g = json['G'];
    r = json['R'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['A'] = this.a;
    data['B'] = this.b;
    data['G'] = this.g;
    data['R'] = this.r;
    return data;
  }
}

class General {
  String createTime;
  String name;

  General({this.createTime, this.name});

  General.fromJson(Map<String, dynamic> json) {
    createTime = json['createTime'];
    name = json['name'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['createTime'] = this.createTime;
    data['name'] = this.name;
    return data;
  }
}

class ImageQuality {
  Brightness brightness;
  int colorTemperature;
  Brightness contrast;
  int eyeCare;
  int hue;
  int imageQualityMode;
  int saturation;

  ImageQuality(
      {this.brightness,
      this.colorTemperature,
      this.contrast,
      this.eyeCare,
      this.hue,
      this.imageQualityMode,
      this.saturation});

  ImageQuality.fromJson(Map<String, dynamic> json) {
    brightness = json['brightness'] != null
        ? new Brightness.fromJson(json['brightness'])
        : null;
    colorTemperature = json['colorTemperature'];
    contrast = json['contrast'] != null
        ? new Brightness.fromJson(json['contrast'])
        : null;
    eyeCare = json['eyeCare'];
    hue = json['hue'];
    imageQualityMode = json['imageQualityMode'];
    saturation = json['saturation'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.brightness != null) {
      data['brightness'] = this.brightness.toJson();
    }
    data['colorTemperature'] = this.colorTemperature;
    if (this.contrast != null) {
      data['contrast'] = this.contrast.toJson();
    }
    data['eyeCare'] = this.eyeCare;
    data['hue'] = this.hue;
    data['imageQualityMode'] = this.imageQualityMode;
    data['saturation'] = this.saturation;
    return data;
  }
}

class Brightness {
  int b;
  int g;
  int r;
  int all;

  Brightness({this.b, this.g, this.r, this.all});

  Brightness.fromJson(Map<String, dynamic> json) {
    b = json['B'];
    g = json['G'];
    r = json['R'];
    all = json['all'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['B'] = this.b;
    data['G'] = this.g;
    data['R'] = this.r;
    data['all'] = this.all;
    return data;
  }
}

class OutputMode {
  Mosaic mosaic;
  List<ScreenInterfaces> screenInterfaces;
  Size size;

  OutputMode({this.mosaic, this.screenInterfaces, this.size});

  OutputMode.fromJson(Map<String, dynamic> json) {
    mosaic =
        json['mosaic'] != null ? new Mosaic.fromJson(json['mosaic']) : null;
    if (json['screenInterfaces'] != null) {
      screenInterfaces = new List<ScreenInterfaces>();
      json['screenInterfaces'].forEach((v) {
        screenInterfaces.add(new ScreenInterfaces.fromJson(v));
      });
    }
    size = json['size'] != null ? new Size.fromJson(json['size']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.mosaic != null) {
      data['mosaic'] = this.mosaic.toJson();
    }
    if (this.screenInterfaces != null) {
      data['screenInterfaces'] =
          this.screenInterfaces.map((v) => v.toJson()).toList();
    }
    if (this.size != null) {
      data['size'] = this.size.toJson();
    }
    return data;
  }
}

class Mosaic {
  int column;
  int row;

  Mosaic({this.column, this.row});

  Mosaic.fromJson(Map<String, dynamic> json) {
    column = json['column'];
    row = json['row'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['column'] = this.column;
    data['row'] = this.row;
    return data;
  }
}

class ScreenInterfaces {
  int connectCapacity;
  int cropx;
  int cropy;
  int dotpitch;
  int height;
  int interfaceId;
  int interfaceType;
  int isCardOnline;
  int modelId;
  int outputId;
  String outputName;
  Resolution resolution;
  int slotId;
  int width;
  int x;
  int y;

  ScreenInterfaces(
      {this.connectCapacity,
      this.cropx,
      this.cropy,
      this.dotpitch,
      this.height,
      this.interfaceId,
      this.interfaceType,
      this.isCardOnline,
      this.modelId,
      this.outputId,
      this.outputName,
      this.resolution,
      this.slotId,
      this.width,
      this.x,
      this.y});

  ScreenInterfaces.fromJson(Map<String, dynamic> json) {
    connectCapacity = json['connectCapacity'];
    cropx = json['cropx'];
    cropy = json['cropy'];
    dotpitch = json['dotpitch'];
    height = json['height'];
    interfaceId = json['interfaceId'];
    interfaceType = json['interfaceType'];
    isCardOnline = json['isCardOnline'];
    modelId = json['modelId'];
    outputId = json['outputId'];
    outputName = json['outputName'];
    resolution = json['resolution'] != null
        ? new Resolution.fromJson(json['resolution'])
        : null;
    slotId = json['slotId'];
    width = json['width'];
    x = json['x'];
    y = json['y'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['connectCapacity'] = this.connectCapacity;
    data['cropx'] = this.cropx;
    data['cropy'] = this.cropy;
    data['dotpitch'] = this.dotpitch;
    data['height'] = this.height;
    data['interfaceId'] = this.interfaceId;
    data['interfaceType'] = this.interfaceType;
    data['isCardOnline'] = this.isCardOnline;
    data['modelId'] = this.modelId;
    data['outputId'] = this.outputId;
    data['outputName'] = this.outputName;
    if (this.resolution != null) {
      data['resolution'] = this.resolution.toJson();
    }
    data['slotId'] = this.slotId;
    data['width'] = this.width;
    data['x'] = this.x;
    data['y'] = this.y;
    return data;
  }
}

class Resolution {
  int height;
  int refresh;
  int width;

  Resolution({this.height, this.refresh, this.width});

  Resolution.fromJson(Map<String, dynamic> json) {
    height = json['height'];
    refresh = json['refresh'];
    width = json['width'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['height'] = this.height;
    data['refresh'] = this.refresh;
    data['width'] = this.width;
    return data;
  }
}

class Size {
  int height;
  int width;
  int x;
  int y;

  Size({this.height, this.width, this.x, this.y});

  Size.fromJson(Map<String, dynamic> json) {
    height = json['height'];
    width = json['width'];
    x = json['x'];
    y = json['y'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['height'] = this.height;
    data['width'] = this.width;
    data['x'] = this.x;
    data['y'] = this.y;
    return data;
  }
}

class PresetPoll {
  int enable;
  int presetGroupId;

  PresetPoll({this.enable, this.presetGroupId});

  PresetPoll.fromJson(Map<String, dynamic> json) {
    enable = json['enable'];
    presetGroupId = json['presetGroupId'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['enable'] = this.enable;
    data['presetGroupId'] = this.presetGroupId;
    return data;
  }
}

class ScreenLayers {
  int deviceId;
  General general;
  int layerId;
  Lock lock;
  int screenId;
  Source source;
  Size window;

  ScreenLayers(
      {this.deviceId,
      this.general,
      this.layerId,
      this.lock,
      this.screenId,
      this.source,
      this.window});

  ScreenLayers.fromJson(Map<String, dynamic> json) {
    deviceId = json['deviceId'];
    general =
        json['general'] != null ? new General.fromJson(json['general']) : null;
    layerId = json['layerId'];
    lock = json['lock'] != null ? new Lock.fromJson(json['lock']) : null;
    screenId = json['screenId'];
    source =
        json['source'] != null ? new Source.fromJson(json['source']) : null;
    window = json['window'] != null ? new Size.fromJson(json['window']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['deviceId'] = this.deviceId;
    if (this.general != null) {
      data['general'] = this.general.toJson();
    }
    data['layerId'] = this.layerId;
    if (this.lock != null) {
      data['lock'] = this.lock.toJson();
    }
    data['screenId'] = this.screenId;
    if (this.source != null) {
      data['source'] = this.source.toJson();
    }
    if (this.window != null) {
      data['window'] = this.window.toJson();
    }
    return data;
  }
}

class General_1 {
  int flipType;
  bool isBackground;
  bool isFreeze;
  int layerId;
  String name;
  int sizeType;
  int type;
  int zorder;

  General_1(
      {this.flipType,
      this.isBackground,
      this.isFreeze,
      this.layerId,
      this.name,
      this.sizeType,
      this.type,
      this.zorder});

  General_1.fromJson(Map<String, dynamic> json) {
    flipType = json['flipType'];
    isBackground = json['isBackground'];
    isFreeze = json['isFreeze'];
    layerId = json['layerId'];
    name = json['name'];
    sizeType = json['sizeType'];
    type = json['type'];
    zorder = json['zorder'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['flipType'] = this.flipType;
    data['isBackground'] = this.isBackground;
    data['isFreeze'] = this.isFreeze;
    data['layerId'] = this.layerId;
    data['name'] = this.name;
    data['sizeType'] = this.sizeType;
    data['type'] = this.type;
    data['zorder'] = this.zorder;
    return data;
  }
}

class Lock {
  int lock;

  Lock({this.lock});

  Lock.fromJson(Map<String, dynamic> json) {
    lock = json['lock'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['lock'] = this.lock;
    return data;
  }
}

class Source {
  int connectCapacity;
  int cropId;
  int inputId;
  int interfaceType;
  int modelId;
  String name;
  int sourceType;

  Source(
      {this.connectCapacity,
      this.cropId,
      this.inputId,
      this.interfaceType,
      this.modelId,
      this.name,
      this.sourceType});

  Source.fromJson(Map<String, dynamic> json) {
    connectCapacity = json['connectCapacity'];
    cropId = json['cropId'];
    inputId = json['inputId'];
    interfaceType = json['interfaceType'];
    modelId = json['modelId'];
    name = json['name'];
    sourceType = json['sourceType'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['connectCapacity'] = this.connectCapacity;
    data['cropId'] = this.cropId;
    data['inputId'] = this.inputId;
    data['interfaceType'] = this.interfaceType;
    data['modelId'] = this.modelId;
    data['name'] = this.name;
    data['sourceType'] = this.sourceType;
    return data;
  }
}

class SwitchEffect {
  int playPGMIndex;
  int effectType;
  int switchEffect;
  int timeline;

  SwitchEffect(
      {this.playPGMIndex, this.effectType, this.switchEffect, this.timeline});

  SwitchEffect.fromJson(Map<String, dynamic> json) {
    playPGMIndex = json['PlayPGMIndex'];
    effectType = json['effectType'];
    switchEffect = json['switchEffect'];
    timeline = json['timeline'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['PlayPGMIndex'] = this.playPGMIndex;
    data['effectType'] = this.effectType;
    data['switchEffect'] = this.switchEffect;
    data['timeline'] = this.timeline;
    return data;
  }
}

class TestPattern {
  int bright;
  int grid;
  int speed;
  int testPattern;

  TestPattern({this.bright, this.grid, this.speed, this.testPattern});

  TestPattern.fromJson(Map<String, dynamic> json) {
    bright = json['bright'];
    grid = json['grid'];
    speed = json['speed'];
    testPattern = json['testPattern'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['bright'] = this.bright;
    data['grid'] = this.grid;
    data['speed'] = this.speed;
    data['testPattern'] = this.testPattern;
    return data;
  }
}